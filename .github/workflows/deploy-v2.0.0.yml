name: Deploy v2.0.0

on:
  workflow_call:
    secrets:
      ssh_private_key:
        required: true

jobs:

  data:
    name: Get Data
    runs-on: ubuntu-latest
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Load pipeline configuration
      id: load_pipeline
      run: echo "config=$(cat pipeline.json | jq -c .)" >> $GITHUB_ENV

    - name: Extract properties
      run: |
        echo "current_branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_ENV
        echo "staging_branch=$(echo $config | jq -r '.staging.branch')" >> $GITHUB_ENV
        echo "production_branch=$(echo $config | jq -r '.production.branch')" >> $GITHUB_ENV
        echo "staging_url=$(echo $config | jq -r '.staging.url')" >> $GITHUB_ENV
        echo "production_url=$(echo $config | jq -r '.production.url')" >> $GITHUB_ENV
        echo "staging_host=$(echo $config | jq -r '.staging.host')" >> $GITHUB_ENV
        echo "production_host=$(echo $config | jq -r '.production.host')" >> $GITHUB_ENV
        echo "staging_port=$(echo $config | jq -r '.staging.port')" >> $GITHUB_ENV
        echo "production_port=$(echo $config | jq -r '.production.port')" >> $GITHUB_ENV
        echo "staging_username=$(echo $config | jq -r '.staging.username')" >> $GITHUB_ENV
        echo "production_username=$(echo $config | jq -r '.production.username')" >> $GITHUB_ENV
        echo "staging_path=$(echo $config | jq -r '.staging.path')" >> $GITHUB_ENV
        echo "production_path=$(echo $config | jq -r '.production.path')" >> $GITHUB_ENV
        echo "source_path=$(echo $config | jq -r '.source.path')" >> $GITHUB_ENV
        echo "source_package_manager=$(echo $config | jq -r '.source.package_manager')" >> $GITHUB_ENV
        echo "production_node_version=$(echo $config | jq -r '.production.node_version')" >> $GITHUB_ENV
        echo "staging_node_version=$(echo $config | jq -r '.staging.node_version')" >> $GITHUB_ENV

    outputs:
      current_branch: ${{ env.current_branch }}
      staging_branch: ${{ env.staging_branch }}
      production_branch: ${{ env.production_branch }}
      staging_host: ${{ env.staging_host }}
      production_host: ${{ env.production_host }}
      staging_port: ${{ env.staging_port }}
      production_port: ${{ env.production_port }}
      staging_username: ${{ env.staging_username }}
      production_username: ${{ env.production_username }}
      staging_path: ${{ env.staging_path }}
      production_path: ${{ env.production_path }}
      source_path: ${{ env.source_path }}
      source_package_manager: ${{ env.source_package_manager }}
      production_node_version: ${{ env.production_node_version }}
      staging_node_version: ${{ env.staging_node_version }}

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [data]
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2
    
    - name: Setup yarn
      if: ${{ needs.data.outputs.source_package_manager == 'yarn' }}
      run: npm install -g yarn

    - name: Use Node.js (staging server)
      if: ${{ needs.data.outputs.current_branch == needs.data.outputs.staging_branch }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ needs.data.outputs.staging_node_version }}
        cache: ${{ needs.data.outputs.source_package_manager }}

    - name: Use Node.js (production server)
      if: ${{ needs.data.outputs.current_branch == needs.data.outputs.production_branch }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ needs.data.outputs.production_node_version }}
        cache: ${{ needs.data.outputs.source_package_manager }}

    - name: Install dependencies using npm
      if: ${{ needs.data.outputs.source_package_manager == 'npm' }}
      run: npm install
      

    - name: Install dependencies using yarn, and force Git to use HTTPS
      if: ${{ needs.data.outputs.source_package_manager == 'yarn' }}
      run: | 
        git config --global url."https://github.com/".insteadOf "ssh://git@github.com/"
        git config --global url."https://github.com/".insteadOf "git@github.com:"
        yarn config set "npmScopes.default.gitUrl" "https://github.com/"
        rm -rf node_modules yarn.lock
        yarn cache clean --force
        yarn install

    - name: List directory path
      run: |
        echo "Current working directory: $PWD"
        echo "GitHub workspace directory: $GITHUB_WORKSPACE" 

    - name: List directory contents before build
      run: ls -la

    - name: Build project
      run: npm run build --if-present

    - name: List directory contents after build
      run: ls -la

    - name: Run tests
      run: npm test --if-present

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 1

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [data, build_and_test]
    steps:

    - name: Check out repository code
      uses: actions/checkout@v2

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist

    - name: Deploy to staging server
      if: ${{ needs.data.outputs.current_branch == needs.data.outputs.staging_branch }}
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.ssh_private_key }}
        ARGS: "-rltgoDzvO"
        SOURCE: ${{ needs.data.outputs.source_path }}
        TARGET: ${{ needs.data.outputs.staging_path }}
        REMOTE_HOST: ${{ needs.data.outputs.staging_host }}
        REMOTE_PORT: ${{ needs.data.outputs.staging_port }}
        REMOTE_USER: ${{ needs.data.outputs.staging_username }}
        EXCLUDE: "/node_modules/"

    - name: Deploy to production server
      if: ${{ needs.data.outputs.current_branch == needs.data.outputs.production_branch }}
      uses: easingthemes/ssh-deploy@main
      env:
        SSH_PRIVATE_KEY: ${{ secrets.ssh_private_key }}
        ARGS: "-rltgoDzvO"
        SOURCE: ${{ needs.data.outputs.source_path }}
        TARGET: ${{ needs.data.outputs.production_path }}
        REMOTE_HOST: ${{ needs.data.outputs.production_host }}
        REMOTE_PORT: ${{ needs.data.outputs.production_port }}
        REMOTE_USER: ${{ needs.data.outputs.production_username }}
        EXCLUDE: "/node_modules/"